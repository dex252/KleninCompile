using System.Collections.Generic;
using Lexer.Service;

namespace Lexer.Model
{
    public enum State
    {
        Indefinitely = 0,
        Begin = 1,
        Identifier = 2,
        ReserveWord = 3,
        Word = 4,
        Int = 5,
        Double = 6,
        Operator = 7,
        Delimiters = 8,
        Logical = 9,
        ErrorException = 10,
        Plus = 11,
        PlusPlus = 12,
        Minus = 13,
        MinusMinus = 14,
        Equal = 15,
        EqualEqual = 16,
        LogicInequality = 17, /* ! */
        Inequality = 18, /* != */
        More = 19,
        MoreEqual = 20,
        Less = 21,
        LessEqual = 22,
        Ampersand = 23, /* & */
        DoubleAmpersand = 24,
        Or = 25, /* | */
        DoubleOr = 26,
        Devision = 27, /* / */
        Comment = 28, /*  */
        Acute = 29, /* ' */
        HalfChar = 30,
        Char = 31,
        String = 32,
        ShiftRight = 33,
        ShiftLeft = 34,
        IntPoint = 35,
        IntDoubleOperator = 36,
        DevisionMultiplication = 37, /* /* */
        MultiComment = 38, /* /* */
        Dog = 39,
        BackSlashException = 40,
        InvalidCharacter,
        ExponentaInt,
        DoubleD,
        Decimal,
        Float,
        Int_,
        ErrorInIdentifier,
        NumberException,
        Double_,
        ExponentaDouble,
        DoubleToDouble,
        DoubleToDecimal,
        DoubleToFloat,
        DoublePoint,
        ErrorInOperator,
        ErrorInEterator,
        ErrorInLogicalExpression,
        FinishMultipleComment,
        CharException,
        CharWithBackSlash,
        CharLineFowardHalf,
        CharLineFoward,
        ShiftException,
        SpeekDog,
        SleepDog,
        ExponentaIntNumberToDouble,
        ExponentaIntPlus,
        ExponentaIntMinus,
        EndOfFile = 99,
    }
    public class StateTable
    {
        public Dictionary<(char, State), State> Dictionary { get; set; }
        public HashSet<string> ReserveWords { get; set; } = new HashSet<string>()
        {
            {"if"} ,
            {"else"} ,
            {"while"},
            {"int"},
            {"double"},
            {"char"},
            {"bool"},
            {"true"},
            {"false"},
            {"new"},
            {"void"},
            {"return"},
            {"class"},
            {"namespace"},
            {"using"},
            {"null"},
            {"string"},
            {"public"},
            { "private"},
            {"static"},
            {"var"},
            {"float"},
            {"decimal" }
        };

        public StateTable()
        {
            //autogenerated block
            Dictionary = new AutomatGenerated().GetDictionary();
        }
    }
}
